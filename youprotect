require 'colorize'

binary = ARGV[0]

output = `readpe #{binary} 2>/dev/null`

def tool()
   puts `figlet YOUPROTECT`.colorize(:red).bold
             puts "-"*65
             puts "        YOUPROTECT  -  Software Protection Checker (ELF/EXE 64-bit)".colorize(:light_blue).bold
             puts "                Developed by Rubal Sharma (YOU)".colorize(:red).bold
             puts "-" * 65
end


if binary.nil?
  puts "[-] Usage: youprotect <binary>".colorize(:red).bold
    exit
end

unless File.exist?(binary)
  puts "[-] Binary not found! Please specify the full path."
  exit
end


#Stripped_Check
def check_stripped_binary(binary)
  detect = `file #{binary}`
  if detect.include?('not stripped')
    puts "[-] Not Stripped"
     else
      puts "[+] Stripped Binary".colorize(:red).bold
     end
end



#Check_NX
def check_nx(binary)
  prog_headers = `readelf -W -l #{binary} 2>/dev/null`
  if prog_headers.match?(/GNU_STACK.*RWE/)
   puts "[-] NX Disabled"
  else
    puts  "[+] NX Enabled".colorize(:red).bold
  end
end


#Check_canary
def check_canary(binary)
  output = `readelf -s #{binary} 2>/dev/null`
  if output.include?("__stack_chk_fail")
    puts "[+] Canary Found (Enabled)".colorize(:red).bold
  else
    puts "[-] Canary Not Found (Disabled)"
  end
end


#Check_PIE
def check_pie(binary)
  type_info = `readelf -h #{binary} 2>/dev/null`
  if type_info.include?("DYN")
   puts "[+] PIE Enabled".colorize(:red).bold
  else
    puts "[-] PIE Disabled"
  end
end

#Check_relro
def check_relro(binary)
  program_headers = `readelf -l #{binary} 2>/dev/null`
  dynamic_section = `readelf -d #{binary} 2>/dev/null`

  if program_headers.include?("GNU_RELRO")
    if dynamic_section.include?("BIND_NOW")
      puts "[+] Full RELRO".colorize(:green).bold
    else
      puts "[+] Partial RELRO".colorize(:yellow).bold
    end
  else
    puts "[-] No RELRO".colorize(:red).bold
  end
end


#checek dep_nx exe
def check_dep_nx(output)
  if output.include?("IMAGE_DLLCHARACTERISTICS_NX_COMPAT")
    puts "[+] DEP (NX) Enabled".colorize(:red).bold
  else
    puts "[-] DEP (NX) NOT Enabled"
  end
end



def check_seh(output)
  if output.include?("IMAGE_DLLCHARACTERISTICS_NO_SEH") 
    puts "[+] SEH Present (NO_SEH not set)".colorize(:red).bold
  else
    puts "[-] SEH NOT Present (NO_SEH is set)"
  end
end

def check_safeseh(output)
  if output.include?(".pdata") && output.include?(".xdata") 
    puts "[+] SafeSEH Enabled:  Structured Exception Table Found".colorize(:red).bold
  else
    puts "[-] SafeSEH Disabled:  Structured Exception Info Missing"
  end
end


#check stack_cookies
def check_stack_cookies(output)
  if output.include?("__security_cookie")
    puts "[+] Stack Cookies Enabled (/GS)".colorize(:red).bold
  else
    puts "[-] Stack Cookies NOT Enabled"
  end
end

#check cfg
def check_cfg(output)
  if output.include?("IMAGE_DLLCHARACTERISTICS_GUARD_CF") || output.include?("GuardFlags")
    puts "[+] Control Flow Guard (CFG) Enabled".colorize(:red).bold
  else
    puts "[-] CFG NOT Enabled"
  end
end


#check digital signature
def check_digital_signature(output)
  if output.include?("Security Directory")
    puts "[+] Digitally Signed".colorize(:red).bold
  else
    puts "[-] No Digital Signature"
  end
end

tool()
puts ""
puts "[+] Analyzing File..............".colorize(:green)
sleep 2


detect = `file #{binary}`
if detect.include?('ELF') && detect.include?('64-bit')
puts "[*] File detected: Linux ELF 64 bit".bold
sleep 2
puts ""
puts "==========Checking LINUX Binary Protections=========="
sleep 1
check_stripped_binary(binary)
check_nx(binary)
check_canary(binary)
check_pie(binary)
check_relro(binary)
puts "========================================================"
 elsif  detect.include?('PE32+')
    puts "[*] File detected: Windows EXE 64 bit".bold
sleep 2
puts ""
puts "====== Windows protection check is sketchy â€” trust it like you trust public Wi-Fi======".colorize(:yellow)
sleep 1
check_dep_nx(output)
check_seh(output)
check_safeseh(output)
check_stack_cookies(output)
check_cfg(output)
check_digital_signature(output)
puts "================================================="


  else
    puts "[-] We only detect ELF 64-bit and EXE 64-bit".colorize(:red).bold
    exit
 end
